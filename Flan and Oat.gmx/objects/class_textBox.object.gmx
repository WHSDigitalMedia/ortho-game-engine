<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize message and prerender 
textSpeed = 1 / room_speed; //must be at least 0, smaller = faster, must be over room_speed
duration = room_speed / room_speed; //same as above
message = "According to all known laws of aviation, there is no way that a bee should be able to fly. Its wings are too small to get its fat little body off the ground. The bee, of course, flies anyways. Because bees don't care what humans think is impossible";
strTemp = "";
strDisplay = "";

strLen = string_length(message);
lastSpace = 0;
lastSpaceNum = 1;
lineBreak = 0;
lineBreakNum = 1;
paraBreak = 0;
paraBreakNum = 1;
vCheck = 0;
strPos = 1;
last = false;

nextChar = "";
pause = false;
draw_set_font(font0);

width = room_width/2;
height = 256;
padding = 16;

//Prerender the string
while strPos &lt;= strLen {
    //pull characters one at a time from the original
    nextChar = string_copy(message, strPos, 1);
    
    //check for spaces
    if nextChar == " " {
        lastSpace[lastSpaceNum] = strPos;
        lastSpaceNum++;
    }
    
    //copy the character into the temp string
    strTemp += nextChar;
    strPos++;
    
    //check if the string has gone over the horizontal edge
    if string_width(strTemp) &gt; width - padding {
        //add line break
        strTemp = string_insert("#", strTemp, lastSpace[lastSpaceNum - 1]);
        lineBreak[lineBreakNum] = lastSpace[lastSpaceNum - 1];
        lineBreakNum++;
        //get rid of extra space (+1 becuase we added a line break in the previous line)
        strTemp = string_delete(strTemp, lastSpace[lastSpaceNum - 1] + 1, 1);
    }
    
    //check if the string has gone over the vertical edge (only once)
    if vCheck == 0 &amp;&amp; string_height(strTemp) &gt; height - padding vCheck = lineBreakNum - 2;
}

//Set other stuff
while (paraBreakNum &lt; lineBreakNum - paraBreakNum * vCheck) {
    paraBreak[paraBreakNum] = lineBreak[paraBreakNum + paraBreakNum * vCheck] + 1;
    paraBreakNum++;
}

//Reset Stuff
message = strTemp;
strLen = string_length(message);
strPos = 1;
paraBreakNum = 1;

//Begin to render text
alarm_set(0, room_speed * textSpeed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Add letters
nextChar = string_copy(message, strPos, 1);

strDisplay += nextChar;
strPos++;

//Stop once the string is complete
if strPos &gt; strLen {
    alarm_set(1, room_speed * duration);
    alarm_set(0, -1);
    exit;
}

//Stop if stop reached
if strPos == paraBreak[paraBreakNum] {
    //get rid of the extra char
    strDisplay = string_delete(strDisplay, string_length(strDisplay), 1);
    pause = true;    
    alarm_set(0, -1);
    exit;
}

alarm_set(0, room_speed * textSpeed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Continue
if pause &amp;&amp; mouse_check_button_pressed(mb_left) {  
    if paraBreakNum == array_length_1d(paraBreak) - 1 last = true;
    //Reset stuffs
    strDisplay = "";
    if paraBreakNum &lt; array_length_1d(paraBreak) - 1 paraBreakNum++;
    //unpause and continue
    pause = false;
    alarm_set(0, room_speed * textSpeed);
} else if mouse_check_button_pressed(mb_left) &amp;&amp; !last {
    //skiperinos to the next paragraph break or end
    if paraBreakNum &lt; array_length_1d(paraBreak) {
        next = string_copy(message, strPos, paraBreak[paraBreakNum] - strPos);
        //fill out the rest
        strDisplay += next;
        strPos += string_length(next);
        pause = true;
        alarm_set(0, -1);
    } else {
        show_debug_message('the thing');
        strDisplay += string_copy(message, strPos, strLen);
        strPos = strLen + 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///draw the text
draw_rectangle(x, y, x + width, y + height, true);
draw_text(x + padding, y + padding, strDisplay);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
